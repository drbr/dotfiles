# For all these settings to work as expected, you should be using at least Git 2.37.
# Earlier versions had different defaults and this config does not account for them.

[user]
	# Use the same email address as you have on your GitHub account,
	# otherwise GitHub won't know your commits are from you.
	name = Andrew Brandon
	email = drbr@users.noreply.github.com

[init]
	# Since Git 2.28, we can choose a name for the default branch on new repos.
	defaultBranch = main

# Custom colors for differnt ref types when running `git log` (see aliases below).
# The defaults are fine, but I like these better with my terminal color scheme.
[color "decorate"]
	HEAD = magenta bold
	branch = red bold
	remoteBranch = green bold
	tag = cyan
	stash = magenta

[alias]
	st = status
	co = checkout

	# Like `git checkout`, but works with a single argument only (e.g. switch branches).
	# If we're already on that branch, it'll be a no-op. Use this in scripts to help prevent duplicate
	# entries on the branch history when checking out the current branch. This will keep
	# `git checkout -` working nicely.
	#
	# Not assigning this to `git co` because the parameter doesn't support tab-completion, so it would
	# hinder interactive use. But, with an informative shell prompt, we probably wouldn't try to
	# check out the current branch anyway.
	switch-or-noop = ![[ \"$(git branch --show-current)\" != \"$1\" ]] && git checkout $1 || true

	# Pull, and also delete remote-tracking branches that no longer exist.
	pp = pull --prune

	# List all branches with their upstream tracking info.
	bb = branch -vv

	# Commit with the magic message that causes `git rebase -i` to mark that commit as `fixup`
	cs = commit --fixup=HEAD

	# Show the DAG of commits (directed acyclic graph) in various ways.
	# You can add more `git log` arguments (e.g. more refs to log) after any of these commands.
	#
	# Word wrapping on large graphs ruins the ASCII art, so this command adds some environment
	# variables to prevent the pager from word-wrapping, and instead you can use the left/right
	# arrow keys to scroll horizontally. See `man less` for more info. This also assumes that
	# the core.pager config is set up with the flags specified below.
	#
	# - `git graph` shows the current branch only (basically a fancy/concise `git log`).
	#   I don't use this by itself.
	# - `git dab` (B for branch) shows the DAG with only the current branch and main.
	# - `git dag` shows the DAG of the entire repo with all local branches, tags, and main.
	# - Use `git dag --all` to show everything, including the remote branches.
	graph = !LESS="'-S -# 4'" git log --graph --oneline --pretty=format:'%C(auto)%h%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset'
	dab = graph HEAD origin/HEAD
	dag = dab --branches --tags

	# git-log all the current user's commits only, from the refs given as additional arguments.
	mine = !git graph --author \"$(git config user.name)\"

	# Force-delete local branches whose remote tracking branches no longer exist.
	# NOTE: THIS IS POTENTIALLY DESTRUCTIVE! In my workflow, it is meant to catch branches that have
	# been merged and deleted via GitHub pull requests.
	delete-old-local-branches = !git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D

	# Return the name of the default branch, so you can switch to it in commands like `git rr`.
	# This is rather hacky so maybe there's an easier way...
	#
	# It first tries the branch pointed to by `origin/HEAD`, and if there isn't an origin/HEAD, then it
	# uses the global default branch config. And if there isn't one of those, then it uses Git's default
	# of `master`. (there will always be a default config in this file, but if you copy-paste this for
	# your own use, then there may not be)
	#
	# If this command is giving the wrong branch name:
	#   - If the origin default branch has changed, run `git remote set-head origin --auto`
	#     to update the local ref.
	#   - If you have a repo without a remote that uses a different default branch than the one
	#     specified as the global default (e.g. your older repo has "master" but the global default
	#     is "main"), add a repo-specific config: `git config init.defaultBranch master`.
	default-branch = !branch=$(git rev-parse --abbrev-ref origin/HEAD 2>/dev/null) && sed 's|^origin/||' <<<$branch || git config init.defaultBranch || echo master

	# Switch to the default branch, pull the latest, and remove deleted remote branches
	# and the local branches that tracked them.
	rr = !git switch-or-noop $(git default-branch) && git pull --prune && git delete-old-local-branches

[core]
	# Default options for `less` so colors can happen, and other nice things.
	pager = less -FMRiX

	# Deal with cross-platform line endings the POSIX way. If you're using Windows, set this to "true" instead.
	autocrlf = input

[pull]
	# Always `git pull --rebase`. Helps keep commit history linear.
	rebase = true

[push]
	# Automatically set the upstream tracking branch if it's not set already, as if you ran `git push -u`.
	# This config requires Git 2.37 or higher. If using an older version of Git, consider aliasing
	# `git push` to `git push -u` instead.
	autoSetupRemote = true

[rebase]
	# Does the magic mentioned in `git cs`.
	autosquash = true

[rerere]
	# "Reuse recorded resolution" of conflicted merges. Makes rebases less painful.
	enabled = true

# Use Beyond Compare (paid diff/merge GUI) when running `git difftool`.
[diff]
	tool = bc3

[difftool "bc3"]
	trustExitCode = true

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[credential]
	# Use the Mac keychain to store credentials to remote repos.
	helper = osxkeychain

[url "git@github.com:"]
	insteadOf = https://github.com/
